"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[792],{6930:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>a});const l=JSON.parse('{"id":"high-performance-computing/how-to-build-slurm-single-node-with-full-functions","title":"Single node","description":"Create the relative file to set up a single node using docker. It is for study only, do not use it for your production set up.","source":"@site/docs/3.high-performance-computing/3.how-to-build-slurm-single-node-with-full-functions.md","sourceDirName":"3.high-performance-computing","slug":"/high-performance-computing/how-to-build-slurm-single-node-with-full-functions","permalink":"/river-docs/docs/high-performance-computing/how-to-build-slurm-single-node-with-full-functions","draft":false,"unlisted":false,"editUrl":"https://github.com/riverxdata/docs/3.high-performance-computing/3.how-to-build-slurm-single-node-with-full-functions.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Architecture","permalink":"/river-docs/docs/high-performance-computing/slurm-architecture"},"next":{"title":"Scalable HPC","permalink":"/river-docs/docs/category/scalable-hpc"}}');var s=r(4848),t=r(8453);const o={},i="Single node",c={},a=[{value:"Config",id:"config",level:2},{value:"Dockerfile",id:"dockerfile",level:3},{value:"slurm.conf.template",id:"slurmconftemplate",level:3},{value:"slurmdbd.conf",id:"slurmdbdconf",level:3},{value:"run.sh",id:"runsh",level:3},{value:"Submit job",id:"submit-job",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"single-node",children:"Single node"})}),"\n",(0,s.jsx)(n.p,{children:"Create the relative file to set up a single node using docker. It is for study only, do not use it for your production set up."}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"This architect is designed for single node using docker"}),"\n",(0,s.jsx)(n.li,{children:"Require to install docker"}),"\n"]})}),"\n",(0,s.jsx)(n.h2,{id:"config",children:"Config"}),"\n",(0,s.jsx)(n.h3,{id:"dockerfile",children:"Dockerfile"}),"\n",(0,s.jsx)(n.p,{children:"In this Dockerfile, there are a few files to copy:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"slurm.conf.template"}),": The template for render ",(0,s.jsx)(n.code,{children:"slurm.conf"})," that will be shared and consitent between all nodes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"slurmdbd.conf"}),": The config on the slurm controller node, where it store the config of the slurmdbd for accessing and managing job via database"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"run.sh"}),": The cmd to launch all service when docker image start"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"What is does it this:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Create a user called ",(0,s.jsx)(n.code,{children:"river"})," will be used as normal user"]}),"\n",(0,s.jsx)(n.li,{children:"Install slurmdbd, mysql for database"}),"\n",(0,s.jsx)(n.li,{children:"Munge for authentication between nodes"}),"\n",(0,s.jsx)(n.li,{children:"Optional: Install openssh server that can similar to login from a public network"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'FROM ubuntu:20.04\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install necessary packages\nRUN apt-get update && apt-get install -y \\\n    munge slurm-wlm slurm-wlm-basic-plugins slurmdbd \\\n    mariadb-server mariadb-client \\\n    build-essential \\\n    openssh-server net-tools \\\n    python3 python3-dev python3-pip python3-venv \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Create user for the cluster and setup SSH\nRUN useradd -m -s /bin/bash river && echo "river:password" | chpasswd && \\\n    usermod -aG sudo river\n\n# Setup system directories\nRUN mkdir -p /run/sshd /etc/munge /var/log/munge /var/lib/munge /etc/slurm /var/spool/slurmd \\\n    && chown -R munge:munge /etc/munge /var/log/munge /var/lib/munge \\\n    && chmod 0700 /etc/munge /var/log/munge /var/lib/munge \\\n    && /usr/sbin/create-munge-key \\\n    && mkdir -p /var/log/slurm /var/run/mysqld \\\n    && chown -R mysql:mysql /var/lib/mysql /var/run/mysqld\n\n# Copy configuration files\nCOPY slurm.conf.template /etc/slurm-llnl/slurm.conf.template\nCOPY slurmdbd.conf /etc/slurm-llnl/slurmdbd.conf\nCOPY my.cnf /etc/mysql/my.cnf\n\n# Modify system user slurm\nRUN usermod -s /bin/bash slurm\nCOPY run.sh /opt\n# Expose necessary ports\nEXPOSE 22\nCMD "/opt/run.sh"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"slurmconftemplate",children:"slurm.conf.template"}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"This one is for single node, the dynamic config will be cpus and memory only"}),"\n",(0,s.jsx)(n.li,{children:"For multiple nodes, the config can be more customize on the patition, nodename"}),"\n",(0,s.jsx)(n.li,{children:"Include the worker nodes,"}),"\n"]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"# slurm.conf for a single-node Slurm cluster with accounting\nClusterName=localcluster\nSlurmctldHost=localhost\nMpiDefault=none\nProctrackType=proctrack/linuxproc\nReturnToService=2\nSlurmctldPidFile=/run/slurmctld.pid\nSlurmctldPort=6817\nSlurmdPidFile=/run/slurmd.pid\nSlurmdPort=6818\nSlurmdSpoolDir=/var/lib/slurm-llnl/slurmd\nSlurmUser=slurm\nStateSaveLocation=/var/lib/slurm-llnl/slurmctld\nSwitchType=switch/none\nTaskPlugin=task/none\nAuthType=auth/munge\n\n# TIMERS\nInactiveLimit=0\nKillWait=30\nMinJobAge=300\nSlurmctldTimeout=120\nSlurmdTimeout=300\nWaittime=0\n\n# SCHEDULING\nSchedulerType=sched/backfill\nSelectType=select/cons_tres\nSelectTypeParameters=CR_Core\n\n# ACCOUNTING (uses slurmdbd)\nAccountingStorageHost=localhost\nAccountingStorageType=accounting_storage/slurmdbd\nAccountingStoragePort=6819\nJobCompType=jobcomp/none\nJobAcctGatherType=jobacct_gather/linux\nJobAcctGatherFrequency=30\n\n# LOGGING\nSlurmctldDebug=info\nSlurmctldLogFile=/var/log/slurm/slurmctld.log\nSlurmdDebug=info\nSlurmdLogFile=/var/log/slurm/slurmd.log\n# COMPUTE NODES (Single-node configuration)\nNodeName=localhost CPUs=<<CPUS>> Sockets=1 CoresPerSocket=<<CPUS>> ThreadsPerCore=1 RealMemory=<<MEMORY>> State=UNKNOWN\n\n# PARTITION CONFIGURATION\nPartitionName=LocalQ Nodes=ALL Default=YES MaxTime=INFINITE State=UP\n"})}),"\n",(0,s.jsx)(n.h3,{id:"slurmdbdconf",children:"slurmdbd.conf"}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"It will store the secrets in  database with user and password"}),"\n",(0,s.jsxs)(n.li,{children:["The secrets will be matched when we use ",(0,s.jsx)(n.code,{children:"run.sh"})," to generate the realative database later"]}),"\n"]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"PidFile=/run/slurmdbd.pid\nLogFile=/var/log/slurm/slurmdbd.log\nDebugLevel=error\nAuthType=auth/munge\nDbdHost=localhost\nDbdPort=6819\n\n# DB connection data\nStorageType=accounting_storage/mysql\nStorageHost=localhost\nStoragePort=3306\nStorageUser=slurm\nStoragePass=slurm\nStorageLoc=slurm_acct_db\nSlurmUser=slurm\n"})}),"\n",(0,s.jsx)(n.h3,{id:"runsh",children:"run.sh"}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Replace the config cpus and memory in the cluster, if not provided, it will use default values"}),"\n",(0,s.jsx)(n.li,{children:"The database will be created with matched database, table , user and password on the above config"}),"\n",(0,s.jsx)(n.li,{children:"Start service: munge(auth), slurmctld(controller), slurmdbd(database controller) and slurmd(computing)"}),"\n"]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'#!/bin/bash\nset -e\n\n# Configure SLURM\ncpus=${1:-2} \nmemory=${2:-2048}\n\nsed -e "s/<<CPUS>>/$cpus/g" -e "s/<<MEMORY>>/$memory/g" /etc/slurm-llnl/slurm.conf.template > /etc/slurm-llnl/slurm.conf\ncat /etc/slurm-llnl/slurm.conf |grep NodeName\n# Start required services\n# slurmdbd\nservice mysql start\nmysql -e "CREATE DATABASE slurm_acct_db;" && \\\nmysql -e "CREATE USER \'slurm\'@\'localhost\' IDENTIFIED BY \'slurm\';" && \\\nmysql -e "GRANT ALL PRIVILEGES ON slurm_acct_db.* TO \'slurm\'@\'localhost\';" && \\\nmysql -e "FLUSH PRIVILEGES;"\nservice slurmdbd start\n# slurmcltd\n/etc/init.d/munge start\nservice slurmctld start\n# ssh\n/usr/sbin/sshd\n# Wait for services to stabilize\nsleep 10\n# Configure SLURM accounts\nsacctmgr -i add cluster localcluster\nsacctmgr -i --quiet add account river Cluster=localcluster\nsacctmgr -i --quiet add user river account=river DefaultAccount=root\nservice slurmdbd restart\nservice slurmctld restart\nslurmd -D\n'})}),"\n",(0,s.jsx)(n.h2,{id:"submit-job",children:"Submit job"}),"\n",(0,s.jsxs)(n.p,{children:["This is for simple illustration on how to submit job basically. If you do not build successfully, it can be pulled from dockerhub\n",(0,s.jsx)(n.a,{href:"https://hub.docker.com/r/nttg8100/river-hpc",children:(0,s.jsx)(n.strong,{children:"nttg8100/river-hpc:1.0.0"})})]}),"\n",(0,s.jsx)(n.admonition,{type:"danger",children:(0,s.jsxs)(n.p,{children:["It is a single node, so the user can run ",(0,s.jsx)(n.strong,{children:"WITHOUT"})," submitting job which violate the purpose of SLURM.\nThere is no way to force user to submit job when they are in a single node"]})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Create a folder that contain those above files, build docker"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker build -t river-hpc:1.0.0\n"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Run the docker, forward port 22 so you can login to localhost using 8080 port"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker run -p 8080:22 river-hpc:1.0.0\n"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Open a new terminal, login with ",(0,s.jsx)(n.code,{children:"password"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ssh river@localhost -p 8081\n"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Submit a basic job"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"srun --pty bash\n"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Squeue to get job"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'squeue -o "%i %P %u %T %M %l %D %C %m %R %Z %N" | column -t\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>i});var l=r(6540);const s={},t=l.createContext(s);function o(e){const n=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),l.createElement(t.Provider,{value:n},e.children)}}}]);